name: Build and Release

on:
  push:
    branches: [ develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.64.3

  build:
    needs: [test, build-mlx-server]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14  # M1 runner
            goos: darwin
            goarch: arm64
            suffix: -darwin-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Download MLX server bundle
      uses: actions/download-artifact@v4
      with:
        name: mlx-server-darwin-arm64
        path: ./mlx-bundle
    
    - name: Build llama-server
      run: |
        # Clone and build llama.cpp
        git clone https://github.com/ggerganov/llama.cpp.git
        cd llama.cpp
        mkdir build
        cd build
        cmake .. -DLLAMA_METAL=ON -DLLAMA_SERVER_SSL=OFF
        cmake --build . --config Release --target llama-server
        cd ../..
        
        # Create backends directory
        mkdir -p backends
        cp llama.cpp/build/bin/llama-server backends/
        chmod +x backends/llama-server
    
    - name: Extract MLX server
      run: |
        # Extract MLX server bundle
        tar -xzf mlx-bundle/mlx-server-darwin-arm64.tar.gz -C backends/
        
        # Verify backends are in place
        echo "Backends directory contents:"
        ls -la backends/
    
    - name: Prepare embedded backends
      run: |
        # Create embedded backends directory structure
        mkdir -p internal/backend/embedded_backends
        
        # Copy backends from build
        cp -r backends/* internal/backend/embedded_backends/ || true
        
        # Compress backends for embedding if script exists
        if [ -f scripts/compress-backends.sh ]; then
          chmod +x scripts/compress-backends.sh
          scripts/compress-backends.sh
        fi
    
    - name: Build with embedded backends
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Try to build with embedded tag, fall back to regular build if it fails
        if [ -d internal/backend/embedded_backends ] && [ "$(ls -A internal/backend/embedded_backends)" ]; then
          echo "Building with embedded backends..."
          go build -tags embedded -o toke${{ matrix.suffix }} -ldflags "-X main.Version=${{ github.ref_name }}" .
        else
          echo "Building without embedded backends..."
          go build -o toke${{ matrix.suffix }} -ldflags "-X main.Version=${{ github.ref_name }}" .
        fi
    
    - name: Create distribution package
      run: |
        # Create a tar.gz with just the toke binary (backends are embedded)
        tar -czf toke${{ matrix.suffix }}.tar.gz toke${{ matrix.suffix }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: toke${{ matrix.suffix }}
        path: toke${{ matrix.suffix }}.tar.gz
        retention-days: 1

  build-mlx-server:
    runs-on: macos-14  # M1 runner for MLX
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Nuitka (optional optimization)
      run: |
        pip install nuitka
      continue-on-error: true
    
    - name: Build optimized MLX server bundle
      run: |
        chmod +x scripts/build-mlx-server-optimized.sh
        # Will use Nuitka if available, otherwise Python
        scripts/build-mlx-server-optimized.sh
    
    - name: Upload MLX server bundle
      uses: actions/upload-artifact@v4
      with:
        name: mlx-server-darwin-arm64
        path: build-mlx-server/mlx-server-darwin-arm64.tar.gz

  test-llama-server:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14  # M1 runner
            arch: arm64
            cmake_args: -DLLAMA_METAL=ON
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Clone llama.cpp
      uses: actions/checkout@v4
      with:
        repository: ggerganov/llama.cpp
        path: llama.cpp
        submodules: recursive
    
    - name: Setup build environment (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake
    
    
    - name: Build llama-server
      run: |
        cd llama.cpp
        mkdir build
        cd build
        cmake .. ${{ matrix.cmake_args }} -DLLAMA_SERVER_SSL=OFF
        cmake --build . --config Release --target llama-server
    
    - name: Test llama-server binary
      run: |
        if [ -f llama.cpp/build/bin/llama-server ]; then
          llama.cpp/build/bin/llama-server --help
          echo "✅ llama-server built successfully"
        else
          echo "❌ llama-server build failed"
          exit 1
        fi

  build-tauri-app:
    needs: [build-mlx-server, test-llama-server]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14  # M1 runner
            target: aarch64-apple-darwin
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Download MLX server bundle
      uses: actions/download-artifact@v4
      with:
        name: mlx-server-darwin-arm64
        path: ./mlx-bundle
    
    - name: Build llama-server
      run: |
        # Clone and build llama.cpp
        git clone https://github.com/ggerganov/llama.cpp.git
        cd llama.cpp
        mkdir build
        cd build
        cmake .. -DLLAMA_METAL=ON -DLLAMA_SERVER_SSL=OFF
        cmake --build . --config Release --target llama-server
        cd ../..
        
        # Copy llama-server to backends
        mkdir -p build/toke-darwin-${{ matrix.arch }}/backends
        cp llama.cpp/build/bin/llama-server build/toke-darwin-${{ matrix.arch }}/backends/
        chmod +x build/toke-darwin-${{ matrix.arch }}/backends/llama-server
    
    - name: Extract and setup MLX server
      run: |
        # Extract MLX server bundle
        tar -xzf mlx-bundle/mlx-server-darwin-arm64.tar.gz -C build/toke-darwin-${{ matrix.arch }}/backends/
        
        # Verify backends are in place
        echo "Backends directory contents:"
        ls -la build/toke-darwin-${{ matrix.arch }}/backends/
    
    - name: Prepare embedded backends for Tauri
      run: |
        # Copy backends to build directory
        cp -r build/toke-darwin-${{ matrix.arch }}/backends backends/
        # Compress backends for embedding
        chmod +x scripts/compress-backends.sh
        scripts/compress-backends.sh
    
    - name: Build toke binary for Tauri with embedded backends
      run: |
        go build -tags embedded -o build/toke-darwin-${{ matrix.arch }}/toke .
        echo "Built toke binary with embedded backends at build/toke-darwin-${{ matrix.arch }}/toke"
    
    - name: Get VERSION
      id: get_version
      run: |
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Update Tauri version
      run: |
        sed -i '' "s/\"version\": \".*\"/\"version\": \"${{ steps.get_version.outputs.version }}\"/" toke-tauri/src-tauri/tauri.conf.json
        echo "Updated tauri.conf.json to version ${{ steps.get_version.outputs.version }}"
    
    - name: Install Tauri dependencies
      working-directory: ./toke-tauri
      run: npm install
    
    - name: Build Tauri App with DMG
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        projectPath: './toke-tauri'
        args: --target ${{ matrix.target }}
    
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: toke-dmg-${{ matrix.arch }}
        path: |
          toke-tauri/src-tauri/target/release/bundle/dmg/*.dmg
          toke-tauri/src-tauri/target/release/bundle/macos/*.app.tar.gz

  test-ngrok-integration:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test ngrok download and setup
      run: |
        mkdir -p build-ngrok
        cd build-ngrok
        
        # Determine platform
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        
        if [ "$ARCH" = "x86_64" ]; then
            ARCH="amd64"
        elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
            ARCH="arm64"
        fi
        
        # Download ngrok
        if [ "$OS" = "darwin" ]; then
            if [ "$ARCH" = "arm64" ]; then
                curl -L -o ngrok.zip "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-arm64.zip"
            else
                curl -L -o ngrok.zip "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip"
            fi
            unzip -q ngrok.zip
        elif [ "$OS" = "linux" ]; then
            if [ "$ARCH" = "arm64" ]; then
                curl -L -o ngrok.zip "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-arm64.zip"
                unzip -q ngrok.zip
            else
                curl -L -o ngrok.tgz "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz"
                tar -xzf ngrok.tgz
            fi
        fi
        
        # Test ngrok
        chmod +x ngrok
        ./ngrok version
        echo "✅ ngrok downloaded and verified successfully"

  # Release is now handled by fast-release.yml which uses PR artifacts
  # This section is kept for backwards compatibility and manual triggers
  release:
    if: github.event_name == 'workflow_dispatch'
    needs: [build, build-tauri-app, test-llama-server, test-ngrok-integration]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Trigger fast release
      run: |
        echo "Triggering fast-release workflow..."
        gh workflow run fast-release.yml
      env:
        GH_TOKEN: ${{ github.token }}